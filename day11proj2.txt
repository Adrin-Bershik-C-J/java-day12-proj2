README.md file:
# 📚 Java Day11 Project 2 - Student Course Enrollment System

This is a **Spring Boot** application that manages **Students**, **Courses**, and **Enrollments** using a clean **DTO-based architecture**.  
It demonstrates **CRUD operations**, **DTO mapping**, and **RESTful API** best practices.

---

## ✅ Features
- 👨‍🎓 Manage Students (Create, Read, Update, Delete)
- 📘 Manage Courses (Create, Read, Update, Delete)
- 📝 Enroll Students into Courses
- 🔍 View:
  - All Enrollments
  - Courses by Student ID
  - Students by Course ID
- 🚫 Prevents infinite JSON recursion using **DTOs**
- ✅ Clean layered structure: **Controller → Service → Repository → Entity/DTO**

---

## 🗂️ Project Structure
```
Directory structure:
└── adrin-bershik-c-j-java-day11-proj2/
    ├── mvnw
    ├── mvnw.cmd
    ├── pom.xml
    ├── request.http
    ├── src/
    │   ├── main/
    │   │   ├── java/
    │   │   │   └── com/
    │   │   │       └── training/
    │   │   │           └── day11proj2/
    │   │   │               ├── Day11proj2Application.java
    │   │   │               ├── controller/
    │   │   │               │   ├── CourseController.java
    │   │   │               │   ├── EnrollmentController.java
    │   │   │               │   └── StudentController.java
    │   │   │               ├── dto/
    │   │   │               │   ├── CourseDTO.java
    │   │   │               │   ├── EnrollmentDTO.java
    │   │   │               │   └── StudentDTO.java
    │   │   │               ├── entity/
    │   │   │               │   ├── Course.java
    │   │   │               │   ├── Enrollment.java
    │   │   │               │   └── Student.java
    │   │   │               ├── repository/
    │   │   │               │   ├── CourseRepository.java
    │   │   │               │   ├── EnrollmentRepository.java
    │   │   │               │   └── StudentRepository.java
    │   │   │               └── service/
    │   │   │                   ├── CourseServiceInterface.java
    │   │   │                   ├── CourseServiceInterfaceImplementation.java
    │   │   │                   ├── EnrollmentServiceInterface.java
    │   │   │                   ├── EnrollmentServiceInterfaceImplementation.java
    │   │   │                   ├── StudentServiceImplementation.java
    │   │   │                   └── StudentServiceInterface.java
    │   │   └── resources/
    │   │       └── application.properties
    │   └── test/
    │       └── java/
    │           └── com/
    │               └── training/
    │                   └── day11proj2/
    │                       └── Day11proj2ApplicationTests.java
    └── .mvn/
        └── wrapper/
            └── maven-wrapper.properties
```

---

## ⚙️ Technologies Used
- **Java 17+**
- **Spring Boot 3.x**
- **Spring Data JPA**
- **Hibernate**
- **H2 / MySQL** (configurable)
- **Lombok** (for boilerplate code)

---

## 🚀 How to Run
1. **Clone** the repository:
   ```bash
   git clone https://github.com/Adrin-Bershik-C-J/java-day11-proj2.git
   cd java-day11-proj2


package com.training.day11proj2.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.training.day11proj2.dto.CourseDTO;
import com.training.day11proj2.entity.Course;
import com.training.day11proj2.service.CourseServiceInterface;

@RestController
@RequestMapping("/api/course")
public class CourseController {

    @Autowired
    private CourseServiceInterface courseService;

    @PostMapping
    public Course createCourse(@RequestBody Course course) {
        return courseService.createCourse(course);
    }

    @PutMapping("/{id}")
    public Optional<Course> updateCourseDetails(@PathVariable Long id, @RequestBody Course course) {
        return courseService.updateCourseDetails(id, course);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Optional<Course>> deleteCourse(@PathVariable Long id) {
        return courseService.deleteCourse(id);
    }

    @GetMapping("/{id}")
    public CourseDTO getCourseDTOById(@PathVariable Long id) {
        return courseService.getCourseDTOById(id);
    }

}


package com.training.day11proj2.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import com.training.day11proj2.dto.EnrollmentDTO;
import com.training.day11proj2.entity.Enrollment;
import com.training.day11proj2.service.EnrollmentServiceInterface;

@RequestMapping("/api/enroll")
@RestController
public class EnrollmentController {

    @Autowired
    private EnrollmentServiceInterface enrollmentServiceInterface;

    @PostMapping
    public Enrollment enroll(@RequestBody Enrollment enrollment) {
        return enrollmentServiceInterface.enroll(enrollment);
    }

    @GetMapping
    public List<EnrollmentDTO> getAllEnrollments() {
        return enrollmentServiceInterface.getAllEnrollmentsDTO();
    }

    @GetMapping("/student/{studentId}")
    public List<EnrollmentDTO> getCoursesByStudent(@PathVariable Long studentId) {
        return enrollmentServiceInterface.getCoursesByStudentId(studentId);
    }

}

package com.training.day11proj2.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.training.day11proj2.dto.StudentDTO;
import com.training.day11proj2.entity.Student;
import com.training.day11proj2.service.StudentServiceInterface;

@RestController
@RequestMapping("/api/student")
public class StudentController {
    
    @Autowired
    private StudentServiceInterface studentService;

    @PostMapping
    public Student createStudent(@RequestBody Student student) {
        return studentService.createStudent(student);
    }

    @PutMapping("/{id}")
    public Optional<Student> updateStudentDetails(@PathVariable Long id, @RequestBody Student student) {
        return studentService.updateStudentDetails(id, student);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Optional<Student>> deleteStudent(@PathVariable Long id) {
        return studentService.deleteStudent(id);
    }

    @GetMapping("/{id}")
    public StudentDTO getStudentDTOById(@PathVariable Long id) {
        return studentService.getStudentDTOById(id);
    }

}

package com.training.day11proj2.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

@AllArgsConstructor
@Getter
@Setter
public class CourseDTO {

    private Long courseId;
    private String title;
    private String description;

}

package com.training.day11proj2.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

@AllArgsConstructor
@Getter
@Setter
public class EnrollmentDTO {

    private Long enrollmentId;
    private Long studentId;
    private String studentName;
    private String studentEmail;
    private Long courseId;
    private String courseTitle;
    private String courseDescription;

}

package com.training.day11proj2.dto;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
@AllArgsConstructor
public class StudentDTO {

    private Long studentId;
    private String name;
    private String email;

}

package com.training.day11proj2.entity;

import java.util.List;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import lombok.Getter;
import lombok.Setter;

@Entity
@Getter
@Setter
public class Course {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long courseId;
    
    private String title;
    private String description;

    @OneToMany(mappedBy = "course")
    private List<Enrollment> enrollments;
    
}

package com.training.day11proj2.entity;

import jakarta.persistence.Entity;

import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import lombok.Getter;
import lombok.Setter;

@Entity
@Getter
@Setter
public class Enrollment {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long enrollmentId;

    @ManyToOne
    @JoinColumn(name = "student_id")
    private Student student;

    @ManyToOne
    @JoinColumn(name = "course_id")
    private Course course;
    
}

package com.training.day11proj2.entity;

import java.util.List;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import lombok.Getter;
import lombok.Setter;

@Entity
@Getter
@Setter
public class Student {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long studentId;

    private String name;
    private String email;

    @OneToMany(mappedBy = "student")
    private List<Enrollment> enrollments;
    
}

package com.training.day11proj2.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import com.training.day11proj2.entity.Course;

public interface CourseRepository extends JpaRepository<Course, Long> {

}

package com.training.day11proj2.repository;

import java.util.List;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import com.training.day11proj2.entity.Enrollment;

public interface EnrollmentRepository extends JpaRepository<Enrollment, Long> {

    @Query("SELECT e FROM Enrollment e WHERE e.student.studentId = :studentId")
    List<Enrollment> findByStudentId(@Param("studentId") Long studentId);

}

package com.training.day11proj2.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import com.training.day11proj2.entity.Student;

public interface StudentRepository extends JpaRepository<Student, Long> {

}

package com.training.day11proj2.service;

import java.util.Optional;

import org.springframework.http.ResponseEntity;

import com.training.day11proj2.dto.CourseDTO;
import com.training.day11proj2.entity.Course;

public interface CourseServiceInterface {

    public Course createCourse(Course course);

    public Optional<Course> updateCourseDetails(Long id, Course course);

    public ResponseEntity<Optional<Course>> deleteCourse(Long id);

    CourseDTO getCourseDTOById(Long id);

}

package com.training.day11proj2.service;

import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import com.training.day11proj2.dto.CourseDTO;
import com.training.day11proj2.entity.Course;
import com.training.day11proj2.repository.CourseRepository;

@Service
public class CourseServiceInterfaceImplementation implements CourseServiceInterface {

    @Autowired
    private CourseRepository courseRepository;

    @Override
    public Course createCourse(Course course) {
        return courseRepository.save(course);
    }

    @Override
    public Optional<Course> updateCourseDetails(Long id, Course course) {
        return courseRepository.findById(id).map(oldCourse -> {
            oldCourse.setTitle(course.getTitle());
            oldCourse.setDescription(course.getDescription());
            return courseRepository.save(oldCourse);
        });
    }

    @Override
    public ResponseEntity<Optional<Course>> deleteCourse(Long id) {
        Optional<Course> course = courseRepository.findById(id);
        if (course.isPresent()) {
            courseRepository.deleteById(id);
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @Override
    public CourseDTO getCourseDTOById(Long id) {
        Course c = courseRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Course not found"));
        return new CourseDTO(c.getCourseId(), c.getTitle(), c.getDescription());
    }
    
}

package com.training.day11proj2.service;

import java.util.List;

import com.training.day11proj2.dto.EnrollmentDTO;
import com.training.day11proj2.entity.Enrollment;

public interface EnrollmentServiceInterface {

    public Enrollment enroll(Enrollment enrollment);

    List<EnrollmentDTO> getAllEnrollmentsDTO();

    List<EnrollmentDTO> getCoursesByStudentId(Long studentId);

}

package com.training.day11proj2.service;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.training.day11proj2.dto.EnrollmentDTO;
import com.training.day11proj2.entity.Enrollment;
import com.training.day11proj2.repository.EnrollmentRepository;

@Service
public class EnrollmentServiceInterfaceImplementation implements EnrollmentServiceInterface {

    @Autowired
    private EnrollmentRepository enrollmentRepository;

    @Override
    public Enrollment enroll(Enrollment enrollment) {
        return enrollmentRepository.save(enrollment);
    }

    @Override
    public List<EnrollmentDTO> getAllEnrollmentsDTO() {
        return enrollmentRepository.findAll().stream().map(this::mapToDTO).collect(Collectors.toList());
    }

    @Override
    public List<EnrollmentDTO> getCoursesByStudentId(Long studentId) {
        return enrollmentRepository.findByStudentId(studentId).stream()
                .map(this::mapToDTO)
                .collect(Collectors.toList());
    }

    private EnrollmentDTO mapToDTO(Enrollment e) {
        return new EnrollmentDTO(
                e.getEnrollmentId(),
                e.getStudent().getStudentId(),
                e.getStudent().getName(),
                e.getStudent().getEmail(),
                e.getCourse().getCourseId(),
                e.getCourse().getTitle(),
                e.getCourse().getDescription());
    }
    
}

package com.training.day11proj2.service;

import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import com.training.day11proj2.dto.StudentDTO;
import com.training.day11proj2.entity.Student;
import com.training.day11proj2.repository.StudentRepository;

@Service
public class StudentServiceImplementation implements StudentServiceInterface {

    @Autowired
    StudentRepository studentRepository;

    @Override
    public Student createStudent(Student student) {
        return studentRepository.save(student);
    }

    @Override
    public Optional<Student> updateStudentDetails(Long id, Student student) {
        return studentRepository.findById(id).map(oldStudent -> {
            oldStudent.setName(student.getName());
            oldStudent.setEmail(student.getEmail());
            return studentRepository.save(oldStudent);
        });
    }

    @Override
    public ResponseEntity<Optional<Student>> deleteStudent(Long id) {
        Optional<Student> student = studentRepository.findById(id);
        if (student.isPresent()) {
            studentRepository.deleteById(id);
            return ResponseEntity.noContent().build();
        } else {
            return ResponseEntity.notFound().build();
        }
    }

    @Override
    public StudentDTO getStudentDTOById(Long id) {
        Student s = studentRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Student not found"));
        return new StudentDTO(s.getStudentId(), s.getName(), s.getEmail());
    }
    
}

package com.training.day11proj2.service;

import java.util.Optional;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;

import com.training.day11proj2.dto.StudentDTO;
import com.training.day11proj2.entity.Student;

public interface StudentServiceInterface {

    public Student createStudent(Student student);

    public Optional<Student> updateStudentDetails(Long id, Student student);

    public ResponseEntity<Optional<Student>> deleteStudent(@PathVariable Long id);

    StudentDTO getStudentDTOById(Long id);

}

 package com.training.day11proj2;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Day11proj2Application {

	public static void main(String[] args) {
		SpringApplication.run(Day11proj2Application.class, args);
	}

}

###
POST http://localhost:8080/api/student
Content-Type: application/json

{
    "name":"Bershik",
    "email":"bershik@gmail.com"
}

###
GET http://localhost:8080/api/student/203

###
PUT http://localhost:8080/api/student/202
Content-Type: application/json

{
  "name": "Adrin Bershik",
  "email": "adrin_updated@gmail.com"
}

###
DELETE http://localhost:8080/api/student/202


###
POST http://localhost:8080/api/course
Content-Type: application/json

{
    "title":"Spring",
    "description":"hands on spring course"
}
# 203 103
###
GET http://localhost:8080/api/course/102

###
PUT http://localhost:8080/api/course/103
Content-Type: application/json

{
    "title":"Spring Boot",
    "description":"hands on spring course project"
}

###
DELETE http://localhost:8080/api/course/102

###
POST http://localhost:8080/api/enroll
Content-Type: application/json

{
    "student": {
        "studentId": 203
    },
    "course": {
        "courseId": 103
    }
}

###
GET http://localhost:8080/api/enroll

###
GET http://localhost:8080/api/enroll/student/203
